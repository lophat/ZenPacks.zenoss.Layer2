This ZenPack provides support to model OSI Layer 2 (or data link layer) topology. Than that topology information is used to suppress events from devices connection to which was lost because they are connected to broken devices.  Data collection is performed using SNMP.

== Gallery ==
<gallery widths=250px heights=127px>
CDPLLDPDiscover.PNG
ClientMACs.PNG
NeighborSwitches.PNG
</gallery>

== Features ==

The features added by this ZenPack can be summarized as follows. They are each detailed further below.

* Discovery and periodic remodeling of Neighbor Switches using CDP/LLDP.
* Discovery and periodic remodeling of MAC address or forwarding tables.
* Event suppression based on discovered forwarding table information.

=== Discovered Components ===

Assigning the ''zenoss.snmp.CDPLLDPDiscover'' modeler plugin to device(s) will result in SNMP discovery of neighbor switches using a combination of CISCO-CDP-MIB and LLDP-MIB. The discovered neighbor switch information will be shown as ''Neighbor Switches'' in the device's component list.

Assigning the ''zenoss.snmp.ClientMACs'' modeler plugin to device(s) will result in SNMP discovery of the device's forwarding tables using BRIDGE-MIB. This information will be stored on existing ''Network Interfaces'', and won't
result in any new components being created.

=== Monitoring ===

This ZenPack performs no monitoring.

=== Event Suppression ===

The forwarding table information gathered by the ''zenoss.snmp.ClientMACs'' modeler is used to automatically perform event suppression in the case of switch failure.

If Zenoss has modeled the forwarding tables of a server's upstream switches, and those switches fail resulting in the server becoming unreachable, the server failure events will be suppressed while the root cause failures of the switches will be shown.

To determine connectivity of device to zenoss instance, this zenpack needs to know where on the network map zenoss instance is located. It is described on Configuration properties of devices class in <code>zZenossGateway</code> zproperty. At zenpack installation it populated with value
found in ''/proc/net/route''. If required, you may manually put there id of the zenoss device, or device to which it is connected.


== Network map ==
[[File:Network map.png|thumb|320px|Network map]]

To inspect interconnections between devices it is possible to use a network map page which is accessed by "Infrastructure" -> "Network Map" tab or "Network Map" menu item of the opened device. It shows connections between devices, interfaces, networks and other entities. In addition, it shows device status (Color of the event with the highest severity for that device).

To display a network map the form on the left side of network map should be filled. "Device ID" field with name or ID of the device starting from which the map will be explored. The depth of the map means how many hops to do when exploring the map. Also, it is possible to select network layers which should be visible on the map. By default all of them will be displayed. To apply changes or create new network map, press "Apply" button at the bottom of the form.

Right mouse click above node opens context menu with options available. 'Pin down' option allows to unpin chosen node.
Detailed information about device is available by clicking on 'Device Info' option from context menu. To draw network map in scope of another node please choose 'Put map root here' option from context menu. It is possible to open device or device component by clicking on corresponding target of network map.

Map could be zoomed using mouse wheel, and panned using mouse. If it disappears from the view, it could be bringed back, using "Center" button in the top right corner of the map. There is also zoom level indicator, and color legend.

== zenmapper daemon ==
To update catalog with connections for network map, is used zenmapper daemon. It runs every 5 minutes by default, but this option could be changed by passing desired number of seconds to the <code>--cycletime</code> argument.

== Writing your own connection provider ==
Imagine, for example that we want to display on the network map connections of VMware NSX components. They are modelled in NSX zenpack.

We need to create new class, called for example NSXConnectionsProvider, which inherit from BaseConnectionsProvider, like this:

<syntaxhighlight lang=python>
# our provider will inherit from this:
from ZenPacks.zenoss.Layer2.connections_provider import BaseConnectionsProvider

# and will yield this:
from ZenPacks.zenoss.Layer2.connections_provider import Connection

class NSXConnectionsProvider(BaseConnectionsProvider):
    def get_connections(self):
        # self.context is a entity for which we will provide connections
        for switch in self.context.nsxvirtualSwitchs():
            # so, our device is called NSXManager, and it has switches
            # yield connecions to the switches
            yield Connection(self.context, (switch, ), ('layer3', 'nsx'))

            # each switch has interfaces:
            for i in switch.nsxinterfaces():
                # yield connection to the interfaces
                yield Connection(switch, (i, ), ['layer3', 'nsx'])

                # and each interface has many to one connection to edges:
                yield Connection(i, (i.nsxedge(), ), ['layer3', 'nsx'])
</syntaxhighlight>

So, we described how to get connections, now we need to tell zenoss, that this will be connections provider for any NSXManager devices. We do it by registering adapter in our zenpack's <code>configure.zcml</code>:


<syntaxhighlight lang=xml>
<configure zcml:condition="installed ZenPacks.zenoss.Layer2.connections_provider">
    <!-- Add this adapters only when module connections_provider is possible to import
         (Which meands that there is installed recent version of Layer2). -->
    <adapter
        factory=".connections_provider.NSXConnectionsProvider"
        for="ZenPacks.zenoss.NSX.NSXManager.NSXManager"
        provides="ZenPacks.zenoss.Layer2.connections_provider.IConnectionsProvider"
    />
</configure>
</syntaxhighlight>

Another way to include adapters, is to put them in separate file, called for example <code>layer2.zcml</code>:

<syntaxhighlight lang=xml>
<?xml version = "1.0" encoding = "utf-8"?>
<configure
    xmlns="http://namespaces.zope.org/zope"
    xmlns:zcml="http://namespaces.zope.org/zcml"
    >

	<adapter
        factory=".connections_provider.DeviceConnectionsProvider"
        for=".HyperVVSMS.HyperVVSMS"
        provides="ZenPacks.zenoss.Layer2.connections_provider.IConnectionsProvider"
	    />

</configure>
</syntaxhighlight>

and than include that file conditionally:

<syntaxhighlight lang=xml>
    <include file="layer2.zcml"
             xmlns:zcml="http://namespaces.zope.org/zcml"
             zcml:condition="installed ZenPacks.zenoss.Layer2.connections_provider" />
</syntaxhighlight>

To test connections that your provider yields, you could run

zenmapper run -v10 -d <name or id of your modelled device>

And then look it up on the network map.

== Usage ==

This ZenPack has two separate capabilities. The first is to collect clients connected to switch ports so that event suppression can be done when the switch fails, and the second is to discover neighbor relationships between network devices using the CDP (Cisco Discovery Protocol) and LLDP (Link Layer Discover Protocol).

=== Collecting Switch Port Clients ===

To enable discovery of clients connected to switch ports you must enable the ''zenoss.snmp.ClientMACs'' modeler plugin for the switch devices. There is no
need to enable this plugin for hosts, servers, or other endpoint devices. It is recommended to only assign the modeler plugin to access switch to which monitored servers are connected.

The discovery is done using BRIDGE-MIB forwarding tables, so it's a prerequisite that the switch supports BRIDGE-MIB. 

=== Collecting Network Device Neighbors ===

To collect neighbor information from network devices that support CDP or LLDP, you must enable the ``zenoss.snmp.CDPLLDPDiscover`` modeler plugin for the devices.

== Requirements ==

This ZenPack has the following requirements.

;[[ZenPack:PythonCollector|PythonCollector ZenPack]]
: This ZenPack depends on [[ZenPack:PythonCollector|PythonCollector]] being installed, and having the associated ''zenpython'' collector process running.

== Service Impact ==

When combined with the Zenoss Service Dynamics product, this ZenPack adds built-in service impact capability based on Layer 2 data. The following service impact relationships are automatically added. These will be included in any services that contain one or more of the explicitly mentioned entities.

;Service Impact Relationships
* Device impacted by upstream switch device.

== Troubleshooting ==

Please refer the the Zenoss Service Dynamics documentation if you run into any of the following problems:

* ZenPack will not install
* Adding a device fails
* Don't understand how to add a device
* Don't understand how to model a device

If you are reinstalling or updating this zenpack on Europa, you should first check in control center that zenmapper daemon is stopped, and if not - stop it. It should be stopped automatically, but while this issue is not fixed, you should do that by hand.

If you cannot find the answer in the documentation, then Resource Manager (Service Dynamics) users should contact [https://support.zenoss.com Zenoss Customer Support]. Core users can use the #zenoss IRC channel or the community.zenoss.org forums.

== Layer2 Terminology ==

The essential mechanism that separates network switches from network hubs is the MAC forwarding table. Instead of broadcasting incoming link layer frames to all it's interfaces, as hubs do, switches look into the forwarding table to find out which particular interface is connected to the destination device. The switch learns which devices are connected to which interface by looking at the source MAC address of incoming frames. Those MAC addresses are called "client MAC addresses".

== Installed Items ==

Installing this ZenPack will add the following items to your Zenoss system.

'''Modeler Plugins'''
* zenoss.snmp.CDPLLDPDiscover
* zenoss.snmp.ClientMACs

'''zProperties'''
* zZenossGateway

'''Daemons'''
* zenmapper

== Changes ==

;1.1.0
* Fix Network Map - Missing link from Cisco device to subnet on depth 2,3,4 (ZEN-18603)
* Make Impact use new connections catalog instead of macs catalog (ZEN-18636)

;1.0.3
* Remove macs_catalog when removing the ZenPack. (ZEN-17967)
* Replace Layer2Info template with ClientMACs modeler plugin.

;1.0.2
* Fix modeling of CDP neighbor switches with IPv6 addresses. (ZEN-17248)
* Avoid community@VLAN context querying for non-Cisco switches. (ZEN-17258)
* Change default cycletime for Layer2Info from 30 minutes to 12 hours. (ZEN-17031)

;1.0.1
* Fix device overview links error. (ZEN-14063)
* Remove add/remove from catalog logging. (ZEN-15465)
* Fix usage of incorrect community VLAN suffixes on BRIDGE-MIB queries. (ZEN-16951)
* Fix looping of impact relationships between switches. (ZEN-17020)
* Fix incorrect modeling of neighbor switches and improve modeling time. (ZEN-17023)
* Stop binding Layer2Info template to /Network by default. (ZEN-17035)

;1.0.0
* Initial release
